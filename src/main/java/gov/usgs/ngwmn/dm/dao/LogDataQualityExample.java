package gov.usgs.ngwmn.dm.dao;

import java.util.ArrayList;
import java.util.List;

public class LogDataQualityExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public LogDataQualityExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andMd5IsNull() {
            addCriterion("MD5 is null");
            return (Criteria) this;
        }

        public Criteria andMd5IsNotNull() {
            addCriterion("MD5 is not null");
            return (Criteria) this;
        }

        public Criteria andMd5EqualTo(String value) {
            addCriterion("MD5 =", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5NotEqualTo(String value) {
            addCriterion("MD5 <>", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5GreaterThan(String value) {
            addCriterion("MD5 >", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5GreaterThanOrEqualTo(String value) {
            addCriterion("MD5 >=", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5LessThan(String value) {
            addCriterion("MD5 <", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5LessThanOrEqualTo(String value) {
            addCriterion("MD5 <=", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5Like(String value) {
            addCriterion("MD5 like", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5NotLike(String value) {
            addCriterion("MD5 not like", value, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5In(List<String> values) {
            addCriterion("MD5 in", values, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5NotIn(List<String> values) {
            addCriterion("MD5 not in", values, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5Between(String value1, String value2) {
            addCriterion("MD5 between", value1, value2, "md5");
            return (Criteria) this;
        }

        public Criteria andMd5NotBetween(String value1, String value2) {
            addCriterion("MD5 not between", value1, value2, "md5");
            return (Criteria) this;
        }

        public Criteria andDepthIsNull() {
            addCriterion("DEPTH is null");
            return (Criteria) this;
        }

        public Criteria andDepthIsNotNull() {
            addCriterion("DEPTH is not null");
            return (Criteria) this;
        }

        public Criteria andDepthEqualTo(Double value) {
            addCriterion("DEPTH =", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthNotEqualTo(Double value) {
            addCriterion("DEPTH <>", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthGreaterThan(Double value) {
            addCriterion("DEPTH >", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthGreaterThanOrEqualTo(Double value) {
            addCriterion("DEPTH >=", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthLessThan(Double value) {
            addCriterion("DEPTH <", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthLessThanOrEqualTo(Double value) {
            addCriterion("DEPTH <=", value, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthIn(List<Double> values) {
            addCriterion("DEPTH in", values, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthNotIn(List<Double> values) {
            addCriterion("DEPTH not in", values, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthBetween(Double value1, Double value2) {
            addCriterion("DEPTH between", value1, value2, "depth");
            return (Criteria) this;
        }

        public Criteria andDepthNotBetween(Double value1, Double value2) {
            addCriterion("DEPTH not between", value1, value2, "depth");
            return (Criteria) this;
        }

        public Criteria andLatitudeIsNull() {
            addCriterion("LATITUDE is null");
            return (Criteria) this;
        }

        public Criteria andLatitudeIsNotNull() {
            addCriterion("LATITUDE is not null");
            return (Criteria) this;
        }

        public Criteria andLatitudeEqualTo(Double value) {
            addCriterion("LATITUDE =", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeNotEqualTo(Double value) {
            addCriterion("LATITUDE <>", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeGreaterThan(Double value) {
            addCriterion("LATITUDE >", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("LATITUDE >=", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeLessThan(Double value) {
            addCriterion("LATITUDE <", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeLessThanOrEqualTo(Double value) {
            addCriterion("LATITUDE <=", value, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeIn(List<Double> values) {
            addCriterion("LATITUDE in", values, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeNotIn(List<Double> values) {
            addCriterion("LATITUDE not in", values, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeBetween(Double value1, Double value2) {
            addCriterion("LATITUDE between", value1, value2, "latitude");
            return (Criteria) this;
        }

        public Criteria andLatitudeNotBetween(Double value1, Double value2) {
            addCriterion("LATITUDE not between", value1, value2, "latitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeIsNull() {
            addCriterion("LONGITUDE is null");
            return (Criteria) this;
        }

        public Criteria andLongitudeIsNotNull() {
            addCriterion("LONGITUDE is not null");
            return (Criteria) this;
        }

        public Criteria andLongitudeEqualTo(Double value) {
            addCriterion("LONGITUDE =", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeNotEqualTo(Double value) {
            addCriterion("LONGITUDE <>", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeGreaterThan(Double value) {
            addCriterion("LONGITUDE >", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("LONGITUDE >=", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeLessThan(Double value) {
            addCriterion("LONGITUDE <", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeLessThanOrEqualTo(Double value) {
            addCriterion("LONGITUDE <=", value, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeIn(List<Double> values) {
            addCriterion("LONGITUDE in", values, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeNotIn(List<Double> values) {
            addCriterion("LONGITUDE not in", values, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeBetween(Double value1, Double value2) {
            addCriterion("LONGITUDE between", value1, value2, "longitude");
            return (Criteria) this;
        }

        public Criteria andLongitudeNotBetween(Double value1, Double value2) {
            addCriterion("LONGITUDE not between", value1, value2, "longitude");
            return (Criteria) this;
        }

        public Criteria andLithologycountIsNull() {
            addCriterion("LITHOLOGYCOUNT is null");
            return (Criteria) this;
        }

        public Criteria andLithologycountIsNotNull() {
            addCriterion("LITHOLOGYCOUNT is not null");
            return (Criteria) this;
        }

        public Criteria andLithologycountEqualTo(Integer value) {
            addCriterion("LITHOLOGYCOUNT =", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountNotEqualTo(Integer value) {
            addCriterion("LITHOLOGYCOUNT <>", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountGreaterThan(Integer value) {
            addCriterion("LITHOLOGYCOUNT >", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountGreaterThanOrEqualTo(Integer value) {
            addCriterion("LITHOLOGYCOUNT >=", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountLessThan(Integer value) {
            addCriterion("LITHOLOGYCOUNT <", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountLessThanOrEqualTo(Integer value) {
            addCriterion("LITHOLOGYCOUNT <=", value, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountIn(List<Integer> values) {
            addCriterion("LITHOLOGYCOUNT in", values, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountNotIn(List<Integer> values) {
            addCriterion("LITHOLOGYCOUNT not in", values, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountBetween(Integer value1, Integer value2) {
            addCriterion("LITHOLOGYCOUNT between", value1, value2, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andLithologycountNotBetween(Integer value1, Integer value2) {
            addCriterion("LITHOLOGYCOUNT not between", value1, value2, "lithologycount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountIsNull() {
            addCriterion("CONSTRUCTIONCOUNT is null");
            return (Criteria) this;
        }

        public Criteria andConstructioncountIsNotNull() {
            addCriterion("CONSTRUCTIONCOUNT is not null");
            return (Criteria) this;
        }

        public Criteria andConstructioncountEqualTo(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT =", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountNotEqualTo(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT <>", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountGreaterThan(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT >", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountGreaterThanOrEqualTo(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT >=", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountLessThan(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT <", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountLessThanOrEqualTo(Integer value) {
            addCriterion("CONSTRUCTIONCOUNT <=", value, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountIn(List<Integer> values) {
            addCriterion("CONSTRUCTIONCOUNT in", values, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountNotIn(List<Integer> values) {
            addCriterion("CONSTRUCTIONCOUNT not in", values, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountBetween(Integer value1, Integer value2) {
            addCriterion("CONSTRUCTIONCOUNT between", value1, value2, "constructioncount");
            return (Criteria) this;
        }

        public Criteria andConstructioncountNotBetween(Integer value1, Integer value2) {
            addCriterion("CONSTRUCTIONCOUNT not between", value1, value2, "constructioncount");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated do_not_delete_during_merge Fri May 25 11:07:09 CDT 2012
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table GW_DATA_PORTAL.LOG_DATA_QUALITY
     *
     * @mbggenerated Fri May 25 11:07:09 CDT 2012
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}